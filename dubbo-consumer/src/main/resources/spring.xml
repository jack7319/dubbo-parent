<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 采用注释的方式配置bean -->
    <context:annotation-config/>

    <!-- 配置要扫描的包 -->
    <context:component-scan base-package="com.bizideal.mn"/>

    <!-- proxy-target-class默认"false",更改为"ture"使用CGLib动态代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->

    <dubbo:application name="dubbo-consumer"/>


    <dubbo:registry protocol="zookeeper" address="10.1.0.18:2181"/>


    <!-- 生成远程服务代理，可以和本地bean一样使用demoService -->

    <dubbo:reference id="userInfoService" interface="com.bizideal.mn.service.UserInfoService" timeout="10000"
                     check="false" mock="return null"  loadbalance="consistenthash"/>
    <!-- 服务降级。http://blog.csdn.net/zuoanyinxiang/article/details/51251836 -->
    <!-- mock配置支持两种，一种是mock="true"，一种是mock="return null" -->
    <!-- 在没有配置mock时，服务没有启动时会报com.alibaba.dubbo.rpc.RpcException -->
    <!-- 配置mock后，在调用超时、网络异常或者服务没有启动时会返回null -->
    <!-- 可以配置服务端的读写分离，读接口配置mock，写接口配置快速失败，正常返回异常 -->


    <!-- 结果缓存。配置方式 cache="true" -->
    <!-- dubbo缓存策略 lru，即按最近最少使用的数据删除多余缓存，保证最热的数据被缓存 -->
    <!-- dubbo缓存策略 threadlocal ，即按最近最少使用的数据删除多余缓存，保证最热的数据被缓存 -->
    <!-- dubbo缓存策略 jcache 与JSR107，即按最近最少使用的数据删除多余缓存，保证最热的数据被缓存 -->

    <!-- 负载均衡策略 -->
    <!-- Random 随机调用服务 -->
    <!-- RoundRobin 轮循调用 -->
    <!-- LeastActive 最少活跃调用 -->
    <!-- ConsistentHash 一致性hash，参数相同的请求发到同一提供者 -->

        </beans>